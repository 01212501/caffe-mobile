--- caffe/src/caffe/util/math_functions.cpp	2017-01-27 09:51:57.502642700 +0800
+++ ../src/caffe/util/math_functions.cpp	2017-02-04 22:35:34.654099433 +0800
@@ -1,5 +1,7 @@
+#ifdef USE_BOOST
 #include <boost/math/special_functions/next.hpp>
 #include <boost/random.hpp>
+#endif
 
 #include <limits>
 
@@ -42,7 +44,7 @@
 void caffe_cpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,
     const int N, const double alpha, const double* A, const double* x,
     const double beta, double* y) {
-  cblas_dgemv(CblasRowMajor, TransA, M, N, alpha, A, N, x, 1, beta, y, 1);
+ cblas_dgemv(CblasRowMajor, TransA, M, N, alpha, A, N, x, 1, beta, y, 1);
 }
 
 template <>
@@ -232,8 +234,12 @@
 
 template <typename Dtype>
 Dtype caffe_nextafter(const Dtype b) {
+#ifdef USE_BOOST
   return boost::math::nextafter<Dtype>(
       b, std::numeric_limits<Dtype>::max());
+#endif
+  return std::nextafter(
+      b, std::numeric_limits<Dtype>::max());
 }
 
 template
@@ -247,12 +253,19 @@
   CHECK_GE(n, 0);
   CHECK(r);
   CHECK_LE(a, b);
+#ifdef USE_BOOST
   boost::uniform_real<Dtype> random_distribution(a, caffe_nextafter<Dtype>(b));
   boost::variate_generator<caffe::rng_t*, boost::uniform_real<Dtype> >
       variate_generator(caffe_rng(), random_distribution);
   for (int i = 0; i < n; ++i) {
     r[i] = variate_generator();
   }
+#else
+  std::uniform_real_distribution<Dtype> random_distribution(a, caffe_nextafter<Dtype>(b));
+  for (int i = 0; i < n; ++i) {
+    r[i] = random_distribution(*caffe_rng());
+  }
+#endif
 }
 
 template
@@ -269,12 +282,19 @@
   CHECK_GE(n, 0);
   CHECK(r);
   CHECK_GT(sigma, 0);
+#ifdef USE_BOOST
   boost::normal_distribution<Dtype> random_distribution(a, sigma);
   boost::variate_generator<caffe::rng_t*, boost::normal_distribution<Dtype> >
       variate_generator(caffe_rng(), random_distribution);
   for (int i = 0; i < n; ++i) {
     r[i] = variate_generator();
   }
+#else
+  std::normal_distribution<Dtype> random_distribution(a, sigma);
+  for (int i = 0; i < n; ++i) {
+    r[i] = random_distribution(*caffe_rng());
+  }
+#endif
 }
 
 template
@@ -291,12 +311,19 @@
   CHECK(r);
   CHECK_GE(p, 0);
   CHECK_LE(p, 1);
+#ifdef USE_BOOST
   boost::bernoulli_distribution<Dtype> random_distribution(p);
   boost::variate_generator<caffe::rng_t*, boost::bernoulli_distribution<Dtype> >
       variate_generator(caffe_rng(), random_distribution);
   for (int i = 0; i < n; ++i) {
     r[i] = variate_generator();
   }
+#else
+  std::bernoulli_distribution random_distribution(p);
+  for (int i = 0; i < n; ++i) {
+    r[i] = random_distribution(*caffe_rng());
+  }
+#endif
 }
 
 template
@@ -311,12 +338,19 @@
   CHECK(r);
   CHECK_GE(p, 0);
   CHECK_LE(p, 1);
+#ifdef USE_BOOST
   boost::bernoulli_distribution<Dtype> random_distribution(p);
   boost::variate_generator<caffe::rng_t*, boost::bernoulli_distribution<Dtype> >
       variate_generator(caffe_rng(), random_distribution);
   for (int i = 0; i < n; ++i) {
     r[i] = static_cast<unsigned int>(variate_generator());
   }
+#else
+  std::bernoulli_distribution random_distribution(p);
+  for (int i = 0; i < n; ++i) {
+    r[i] = static_cast<unsigned int>(random_distribution(*caffe_rng()));
+  }
+#endif
 }
 
 template
